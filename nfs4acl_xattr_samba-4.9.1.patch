diff -ur samba-4.9.1/source3/modules/nfs41acl.x samba-4.9.1-patched/source3/modules/nfs41acl.x
--- samba-4.9.1/source3/modules/nfs41acl.x	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/nfs41acl.x	2019-12-17 20:26:34.922598969 +0530
@@ -92,3 +92,15 @@
         aclflag4        na41_flag;
         nfsace4         na41_aces<>;
 };
+
+/* ACL structure definition as per RFC 7530 Section-6.2.1 */
+struct nfsace40 {
+        acetype4        type;
+        aceflag4        flag;
+        acemask4        access_mask;
+        utf8str_mixed   who;
+};
+
+struct nfsacl40 {
+        nfsace40         na40_aces<>;
+};
diff -ur samba-4.9.1/source3/modules/nfs4_acls.c samba-4.9.1-patched/source3/modules/nfs4_acls.c
--- samba-4.9.1/source3/modules/nfs4_acls.c	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/nfs4_acls.c	2019-12-17 20:26:58.634748421 +0530
@@ -85,6 +85,14 @@
 	params->do_chown = lp_parm_bool(SNUM(conn), SMBACL4_PARAM_TYPE_NAME,
 		"chown", true);
 
+	params->do_reorder = lp_parm_bool(SNUM(conn), SMBACL4_PARAM_TYPE_NAME,
+		"reorder", true);
+	if (params->do_reorder) {
+		DEBUG(10, ("reorder enabled\n"));
+	} else {
+		DEBUG(10, ("reorder disabled\n"));
+	}
+
 	enumval = lp_parm_enum(SNUM(conn), SMBACL4_PARAM_TYPE_NAME, "acedup",
 			       enum_smbacl4_acedups, e_dontcare);
 	if (enumval == -1) {
@@ -289,6 +297,45 @@
 	return 0;
 }
 
+/* Keep DENY aces at top */
+static bool reorder_nt_aces(TALLOC_CTX *mem_ctx,
+	struct security_ace *nt_ace_list,
+	int good_aces)
+{
+	struct security_ace *nt_ace_list_copy = NULL;
+	int i, copied = 0;
+	
+	nt_ace_list_copy = talloc_memdup(mem_ctx, nt_ace_list, sizeof (struct security_ace) * good_aces);
+	if (nt_ace_list_copy==NULL)
+	{
+		DBG_ERR("talloc error with %d aces", good_aces);
+		errno = ENOMEM;
+		return false;
+	}
+
+	for (i = 0; i < good_aces; i++) {
+		if (nt_ace_list_copy[i].type == SEC_ACE_TYPE_ACCESS_DENIED) {
+			DEBUG(10, ("reorder_nt_aces deny ace %d\n", i));
+			nt_ace_list [copied ++] = nt_ace_list_copy[i];
+		}
+	}
+	for (i = 0; i < good_aces; i++) {
+		if (nt_ace_list_copy[i].type == SEC_ACE_TYPE_ACCESS_ALLOWED) {
+			DEBUG(10, ("reorder_nt_aces allowed ace %d\n", i));
+			nt_ace_list [copied ++] = nt_ace_list_copy[i];
+		}
+	}
+
+	TALLOC_FREE(nt_ace_list_copy);
+
+	if (copied != good_aces) {
+		DEBUG(1, ("reorder_nt_aces copied %d good_aces %d", copied, good_aces));
+		return false;
+	}
+
+	return true;
+}
+
 static bool smbacl4_nfs42win(TALLOC_CTX *mem_ctx,
 	const struct smbacl4_vfs_params *params,
 	struct SMB4ACL_T *acl, /* in */
@@ -463,6 +510,7 @@
 	bool ok;
 
 	if (theacl==NULL) {
+		DEBUG(1,("smb_get_nt_acl_nfs4_common returning NT_STATUS_ACCESS_DENIED for theacl==NULL\n"));
 		TALLOC_FREE(frame);
 		return NT_STATUS_ACCESS_DENIED; /* special because we
 						 * need to think through
@@ -481,6 +529,12 @@
 		return map_nt_error_from_unix(errno);
 	}
 
+	if (params->do_reorder) {
+		ok = reorder_nt_aces(mem_ctx, nt_ace_list, good_aces);		
+	} else {
+		DEBUG(10, ("reorder disabled\n"));
+	}
+
 	psa = make_sec_acl(frame, NT4_ACL_REVISION, good_aces, nt_ace_list);
 	if (psa == NULL) {
 		DEBUG(2,("make_sec_acl failed\n"));
@@ -647,6 +701,7 @@
 
 
 static bool smbacl4_fill_ace4(
+	TALLOC_CTX *mem_ctx,
 	const struct smb_filename *filename,
 	const struct smbacl4_vfs_params *params,
 	uid_t ownerUID,
@@ -727,8 +782,24 @@
 		if (sid_to_uid(&ace_nt->trustee, &uid) && uid == ownerUID) {
 			ace_v4->who.uid = uid;
 		} else if (sid_to_gid(&ace_nt->trustee, &gid)) {
-			ace_v4->aceFlags |= SMB_ACE4_IDENTIFIER_GROUP;
-			ace_v4->who.gid = gid;
+		/*
+		 * If sid_to_uid and sid_to_gid both succeed for SID,
+ 		 * SMB_ACE4_IDENTIFIER_GROUP is wrongly set.
+ 		 * Check for SID type as well before setting the flag
+ 		 */
+		const char *sid_domain = NULL;
+		const char *sid_name = NULL;
+		enum lsa_SidType sid_type;
+		bool ret = lookup_sid(mem_ctx, &ace_nt->trustee,
+			&sid_domain, &sid_name, &sid_type);
+		if (ret) {
+			if (sid_type == SID_NAME_DOM_GRP) {
+				DEBUG(1, ("SID Type is SID_NAME_DOM_GRP"));
+				ace_v4->aceFlags |=
+					SMB_ACE4_IDENTIFIER_GROUP;
+			}
+		}
+		ace_v4->who.gid = gid;
 		} else if (sid_to_uid(&ace_nt->trustee, &uid)) {
 			ace_v4->who.uid = uid;
 		} else if (dom_sid_compare_domain(&ace_nt->trustee,
@@ -879,7 +950,7 @@
 		SMB_ACE4PROP_T	ace_v4;
 		bool	addNewACE = true;
 
-		if (!smbacl4_fill_ace4(fsp->fsp_name, pparams,
+		if (!smbacl4_fill_ace4(mem_ctx, fsp->fsp_name, pparams,
 				       ownerUID, ownerGID,
 				       dacl->aces + i, &ace_v4)) {
 			DEBUG(3, ("Could not fill ace for file %s, SID %s\n",
diff -ur samba-4.9.1/source3/modules/nfs4_acls.h samba-4.9.1-patched/source3/modules/nfs4_acls.h
--- samba-4.9.1/source3/modules/nfs4_acls.h	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/nfs4_acls.h	2019-12-17 20:27:04.746786942 +0530
@@ -110,11 +110,12 @@
 struct SMB4ACL_T;
 struct SMB4ACE_T;
 
-enum smbacl4_mode_enum {e_simple=0, e_special=1};
+enum smbacl4_mode_enum {e_simple=0, e_special=1, e_3dfs};
 enum smbacl4_acedup_enum {e_dontcare=0, e_reject=1, e_ignore=2, e_merge=3};
 
 struct smbacl4_vfs_params {
 	enum smbacl4_mode_enum mode;
+	bool do_reorder;
 	bool do_chown;
 	enum smbacl4_acedup_enum acedup;
 	bool map_full_control;
diff -ur samba-4.9.1/source3/modules/nfs4acl_xattr.h samba-4.9.1-patched/source3/modules/nfs4acl_xattr.h
--- samba-4.9.1/source3/modules/nfs4acl_xattr.h	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/nfs4acl_xattr.h	2019-12-17 20:26:38.266620047 +0530
@@ -19,7 +19,7 @@
 #ifndef __NFS4ACL_XATTR_H__
 #define __NFS4ACL_XATTR_H__
 
-enum nfs4acl_encoding {NFS4ACL_ENCODING_NDR, NFS4ACL_ENCODING_XDR};
+enum nfs4acl_encoding {NFS4ACL_ENCODING_NDR, NFS4ACL_ENCODING_XDR, NFS40ACL_ENCODING_XDR};
 
 struct nfs4acl_config {
 	unsigned nfs_version;
@@ -27,6 +27,7 @@
 	char *xattr_name;
 	struct smbacl4_vfs_params nfs4_params;
 	enum default_acl_style default_acl_style;
+	bool validate_mode;
 };
 
 #endif /* __NFS4ACL_XATTR_H__ */
diff -ur samba-4.9.1/source3/modules/nfs4acl_xattr_xdr.c samba-4.9.1-patched/source3/modules/nfs4acl_xattr_xdr.c
--- samba-4.9.1/source3/modules/nfs4acl_xattr_xdr.c	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/nfs4acl_xattr_xdr.c	2019-12-17 20:26:44.156657173 +0530
@@ -15,7 +15,9 @@
  * along with this program; if not, see <http://www.gnu.org/licenses/>.
  *
  */
-
+#include <sys/types.h>
+#include <pwd.h>
+#include <grp.h>
 #include "includes.h"
 #include "smbd/proto.h"
 #include "libcli/security/security_descriptor.h"
@@ -23,6 +25,9 @@
 #include "nfs4_acls.h"
 #include "nfs4acl_xattr.h"
 
+
+#define OVERFLOW_CHECK(val1, val2) ((val1) + (val2) < (val1))
+
 #undef DBGC_CLASS
 #define DBGC_CLASS DBGC_VFS
 
@@ -40,6 +45,21 @@
 #include "nfs41acl.h"
 #include "nfs4acl_xattr_xdr.h"
 
+static unsigned nfs40acl_get_naces(nfsacl40 *nacl40)
+{
+	return nacl40->na40_aces.na40_aces_len;
+}
+
+static void nfs40acl_set_naces(nfsacl40 *nacl40, unsigned naces)
+{
+	nacl40->na40_aces.na40_aces_len = naces;
+}
+
+static nfsace40 *nfs40acl_get_ace(nfsacl40 *nacl40, size_t n)
+{
+	return &nacl40->na40_aces.na40_aces_val[n];
+}
+
 static unsigned nfs4acl_get_naces(nfsacl41 *nacl)
 {
 	return nacl->na41_aces.na41_aces_len;
@@ -60,6 +80,79 @@
 	nacl->na41_flag = flags;
 }
 
+static size_t nfs40acl_get_xdrblob_size(nfsacl40 *nacl40)
+{
+	size_t acl_size;
+	size_t aces_size;
+	size_t identifiers_size;
+	unsigned int i;
+
+	unsigned naces = nfs40acl_get_naces(nacl40);
+
+	/* ACE Structure minus actual identifier strings */
+	struct nfsace40_size {
+		acetype4 type;
+		aceflag4 flag;
+		acemask4 access_mask;
+		u_int who_length;
+	};
+
+	/* ACL Size: Size of (ACE Count) +
+	 * ACE Count * (Size of nfsace40_size) +
+	 * Cumulative Length of Identifiers strings
+	 */
+	acl_size = sizeof(u_int);
+
+	if (naces > NFS4ACL_XDR_MAX_ACES) {
+		DBG_ERR("Too many ACEs: %u", naces);
+		return 0;
+	}
+
+	aces_size = naces * sizeof(struct nfsace40_size);
+
+	if(OVERFLOW_CHECK(acl_size, aces_size)) {
+		DBG_ERR("Integer Overflow error\n");
+		return 0;
+	}
+	acl_size += aces_size;
+
+	DBG_DEBUG("aces_size: %ld\n", aces_size);
+
+	identifiers_size = 0;
+	for (i = 0;  i < naces; i++) {
+		nfsace40 *nace40 = nfs40acl_get_ace(nacl40, i);
+		size_t id_size = nace40->who.utf8string_len;
+		/* UTf-8 identifier strings are aligned */
+		if (nace40->who.utf8string_len % 4) {
+			int alignment = (4 - (nace40->who.utf8string_len % 4));
+			if (OVERFLOW_CHECK(id_size, alignment)) {
+				DBG_ERR("Integer Overflow error\n");
+				return 0;
+			}
+			id_size += alignment;
+		}
+		DBG_DEBUG("identifier[%d] size: %ld\n", i, id_size);
+
+		if (OVERFLOW_CHECK(identifiers_size, id_size)) {
+			DBG_ERR("Integer Overflow error\n");
+			return 0;
+		}
+		identifiers_size += id_size;
+	}
+
+	DBG_DEBUG("total identifiers_size: %ld\n", identifiers_size);
+	if (OVERFLOW_CHECK(acl_size, identifiers_size)) {
+		DBG_ERR("Integer Overflow error\n");
+		return 0;
+	}
+	acl_size += identifiers_size;
+
+	DBG_DEBUG("acl_size: %ld\n", acl_size);
+	return acl_size;
+}
+
+
+
 static size_t nfs4acl_get_xdrblob_size(nfsacl41 *nacl)
 {
 	size_t acl_size;
@@ -82,6 +175,12 @@
 	return acl_size;
 }
 
+static size_t nfs40acl_get_xdrblob_naces(size_t _blobsize)
+{
+	/* Not required */
+	return -1;
+}
+
 static size_t nfs4acl_get_xdrblob_naces(size_t _blobsize)
 {
 	size_t blobsize = _blobsize;
@@ -94,6 +193,45 @@
 	return (blobsize / sizeof(struct nfsace4));
 }
 
+static nfsacl40 *nfs40acl_alloc(TALLOC_CTX *mem_ctx, unsigned naces)
+{
+
+	size_t acl_size = 0, aces_size = 0;
+	nfsacl40 *nacl40 = NULL;
+
+	acl_size = sizeof(nfsacl40);
+
+	if (naces > NFS4ACL_XDR_MAX_ACES) {
+		DBG_ERR("Too many ACEs: %d\n", naces);
+		return NULL;
+	}
+
+	if (OVERFLOW_CHECK(aces_size, (naces * sizeof(struct nfsace40)))) {
+		DBG_ERR("Integer Overflow error\n");
+		return NULL;
+	}
+	aces_size += (naces * sizeof(struct nfsace40));
+
+	if (OVERFLOW_CHECK(acl_size, aces_size)) {
+		DBG_ERR("Integer Overflow error\n");
+		return NULL;
+	}
+	acl_size += aces_size;
+
+	nacl40 = talloc_zero_size(mem_ctx, acl_size);
+	if (nacl40 == NULL) {
+		DBG_ERR("talloc_zero_size failed\n");
+		return NULL;
+	}
+
+	nfs40acl_set_naces(nacl40, naces);
+	nacl40->na40_aces.na40_aces_val =
+		(nfsace40 *)((char *)nacl40 + sizeof(nfsacl40));
+
+	return nacl40;
+}
+
+
 static nfsacl41 *nfs4acl_alloc(TALLOC_CTX *mem_ctx, unsigned naces)
 {
 	size_t acl_size = sizeof(nfsacl41) + (naces * sizeof(struct nfsace4));
@@ -139,6 +277,151 @@
 	return nfs4acl_flags;
 }
 
+static bool create_special_id(TALLOC_CTX *mem_ctx, nfsace40 *nace40, char *id)
+{
+	int len = strlen(id);
+	nace40->who.utf8string_val = talloc_memdup(mem_ctx, id, len);
+	nace40->who.utf8string_len = len;
+	if (nace40->who.utf8string_val == NULL) {
+		DBG_ERR("Error talloc_memdup for %d bytes\n", len);
+		return false;
+	}
+	return true;
+}
+static bool create_numeric_id(TALLOC_CTX *mem_ctx, nfsace40 *nace40, uid_t id)
+{
+	int id_len = snprintf( NULL, 0, "%ld", id);
+	char* strid = talloc_size(mem_ctx, id_len + 1);
+	if (!strid) {
+		DBG_ERR("Error allocating %d bytes\n", id_len + 1);
+		return false;
+	}
+	snprintf(strid, id_len + 1, "%ld", id);
+	nace40->who.utf8string_val = talloc_memdup (mem_ctx, strid, id_len);
+	nace40->who.utf8string_len = id_len;
+	TALLOC_FREE(strid);
+	if (nace40->who.utf8string_val == NULL) {
+		DBG_ERR("Error talloc_memdup for %d bytes\n", id_len);
+		return false;
+	}
+	return true;
+}
+
+static bool smb4acl_to_nfs40acl(vfs_handle_struct *handle,
+			       TALLOC_CTX *mem_ctx,
+			       struct SMB4ACL_T *smb4acl,
+			       nfsacl40 **_nacl40)
+{
+	struct nfs4acl_config *config = NULL;
+	struct SMB4ACE_T *smb4ace = NULL;
+	size_t smb4naces = 0;
+	nfsacl40 *nacl40 = NULL;
+	uint16_t smb4acl_flags = 0;
+	unsigned nacl_flags = 0;
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config,
+				struct nfs4acl_config,
+				return false);
+
+	smb4naces = smb_get_naces(smb4acl);
+	nacl40 = nfs40acl_alloc(mem_ctx, smb4naces);
+	nfs40acl_set_naces(nacl40, 0);
+
+	smb4ace = smb_first_ace4(smb4acl);
+	while (smb4ace != NULL) {
+		SMB_ACE4PROP_T *ace4prop = smb_get_ace4(smb4ace);
+		size_t nace_count = nfs40acl_get_naces(nacl40);
+		nfsace40 *nace40 = nfs40acl_get_ace(nacl40, nace_count);
+
+		nace40->type = ace4prop->aceType;
+		nace40->flag = ace4prop->aceFlags;
+		nace40->access_mask = ace4prop->aceMask;
+
+		if (ace4prop->flags & SMB_ACE4_ID_SPECIAL) {
+			switch (ace4prop->who.special_id) {
+			case SMB_ACE4_WHO_OWNER:
+				if (!create_special_id(mem_ctx, nace40, "OWNER@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_GROUP:
+				if (!create_special_id(mem_ctx, nace40, "GROUP@")) {
+					return false;
+				}
+				break;
+
+			case SMB_ACE4_WHO_EVERYONE:
+				if (!create_special_id(mem_ctx, nace40, "EVERYONE@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_INTERACTIVE:
+				if (!create_special_id(mem_ctx, nace40, "INTERACTIVE@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_NETWORK:
+				if (!create_special_id(mem_ctx, nace40, "NETWORK@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_DIALUP:
+				if (!create_special_id(mem_ctx, nace40, "DIALUP@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_BATCH:
+				if (!create_special_id(mem_ctx, nace40, "BATCH@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_ANONYMOUS:
+				if (!create_special_id(mem_ctx, nace40, "ANONYMOUS@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_AUTHENTICATED:
+				if (!create_special_id(mem_ctx, nace40, "AUTHENTICATED@")) {
+					return false;
+				}
+				break;
+			case SMB_ACE4_WHO_SERVICE:
+				if (!create_special_id(mem_ctx, nace40, "SERVICE@")) {
+					return false;
+				}
+				break;
+
+			default:
+				DBG_ERR("Unsupported special id [%d]\n",
+					ace4prop->who.special_id);
+				continue;
+			}
+			DBG_DEBUG("nace40->who special [%s]\n", nace40->who.utf8string_val);
+		} else {
+			if (ace4prop->aceFlags & SMB_ACE4_IDENTIFIER_GROUP) {
+				nace40->flag |= ACE4_IDENTIFIER_GROUP;
+				if (!create_numeric_id(mem_ctx, nace40, ace4prop->who.gid)) {
+					return false;
+				}
+				DBG_NOTICE("nace40->who gid [%s]\n", nace40->who.utf8string_val);
+			} else {
+				if (!create_numeric_id(mem_ctx, nace40, ace4prop->who.uid)) {
+					return false;
+				}
+				DBG_NOTICE("nace40->who uid [%s]\n", nace40->who.utf8string_val);
+			}
+		}
+
+		nace_count++;
+		nfs40acl_set_naces(nacl40, nace_count);
+		smb4ace = smb_next_ace4(smb4ace);
+	}
+
+	*_nacl40 = nacl40;
+	return true;
+}
+
+
 static bool smb4acl_to_nfs4acl(vfs_handle_struct *handle,
 			       TALLOC_CTX *mem_ctx,
 			       struct SMB4ACL_T *smb4acl,
@@ -214,6 +497,50 @@
 	return true;
 }
 
+NTSTATUS nfs40acl_smb4acl_to_xdr_blob(vfs_handle_struct *handle,
+				     TALLOC_CTX *mem_ctx,
+				     struct SMB4ACL_T *smb4acl,
+				     DATA_BLOB *_blob)
+{
+	nfsacl40 *nacl40 = NULL;
+	XDR xdr = {0};
+	size_t aclblobsize;
+	DATA_BLOB blob;
+	bool ok;
+
+	ok = smb4acl_to_nfs40acl(handle, talloc_tos(), smb4acl, &nacl40);
+	if (!ok) {
+		DBG_ERR("smb4acl_to_nfs4acl failed\n");
+		return NT_STATUS_INTERNAL_ERROR;
+	}
+
+	aclblobsize = nfs40acl_get_xdrblob_size(nacl40);
+	if (aclblobsize == 0) {
+		DBG_ERR("Error calculating XDR blob size\n");
+		return NT_STATUS_INTERNAL_ERROR;
+	}
+
+	blob = data_blob_talloc(mem_ctx, NULL, aclblobsize);
+	if (blob.data == NULL) {
+		TALLOC_FREE(nacl40);
+		return NT_STATUS_NO_MEMORY;
+	}
+	DBG_DEBUG("blob 0x%x size %ld\n", blob.data, blob.length);
+
+	xdrmem_create(&xdr, (char *)blob.data, blob.length, XDR_ENCODE);
+
+	ok = xdr_nfsacl40(&xdr, nacl40);
+	TALLOC_FREE(nacl40);
+	if (!ok) {
+		DBG_ERR("xdr_nfs4acl40 failed\n");
+		return NT_STATUS_NO_MEMORY;
+	}
+
+	*_blob = blob;
+	return NT_STATUS_OK;
+}
+
+
 NTSTATUS nfs4acl_smb4acl_to_xdr_blob(vfs_handle_struct *handle,
 				     TALLOC_CTX *mem_ctx,
 				     struct SMB4ACL_T *smb4acl,
@@ -272,6 +599,44 @@
 	return smb4acl_flags;
 }
 
+static NTSTATUS nfs40acl_xdr_blob_to_nfs40acl(struct vfs_handle_struct *handle,
+					    TALLOC_CTX *mem_ctx,
+					    DATA_BLOB *blob,
+					    nfsacl40 **_nacl40)
+{
+	struct nfs4acl_config *config = NULL;
+	nfsacl40* nacl40;
+	size_t naces;
+	XDR xdr = {0};
+	bool ok;
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config,
+				struct nfs4acl_config,
+				return NT_STATUS_INTERNAL_ERROR);
+
+	nacl40 = talloc_zero_size(mem_ctx, sizeof(nfsacl40));
+	if (nacl40 == NULL) {
+		DBG_ERR("talloc_zero_size failed\n");
+		return NT_STATUS_NO_MEMORY;
+	}
+
+	xdrmem_create(&xdr, (char *)blob->data, blob->length, XDR_DECODE);
+
+	/* XDR allocates the required memory */
+	ok = xdr_nfsacl40(&xdr, nacl40);
+	if (!ok) {
+		DBG_ERR("xdr_nfsacl40 failed\n");
+		return NT_STATUS_INTERNAL_ERROR;
+	}
+
+	/* naces is obtained by XDR decode */
+	naces = nacl40->na40_aces.na40_aces_len;
+	DBG_DEBUG("naces = %d \n", naces);
+
+	*_nacl40 = nacl40;
+	return NT_STATUS_OK;
+}
+
 static NTSTATUS nfs4acl_xdr_blob_to_nfs4acl(struct vfs_handle_struct *handle,
 					    TALLOC_CTX *mem_ctx,
 					    DATA_BLOB *blob,
@@ -306,6 +671,214 @@
 	return NT_STATUS_OK;
 }
 
+static int get_numeric_uid(char *id, uint32_t len, uint32_t *puid)
+{
+	char *username = NULL;
+	struct passwd *password = NULL;
+
+	/* Check if the id is in form of username@domainname */
+	if (NULL == strchr (id, '@')) {
+		DBG_DEBUG("ace.who is numeric identifier\n");
+		char *endptr = NULL;
+		uint32_t uid;
+		uid = strtoul(id, &endptr, 10);
+		if (endptr >= id && endptr < id + len) {
+			DBG_ERR("Error converting id [%s] to numeric id\n", id);
+			return -1;
+		} else {
+			*puid = uid;
+			return 0;
+		}
+	}
+	DBG_DEBUG("ace.who is string identifier\n");
+
+	/* Parse the identifier to get only username. Strip off the @localdomain */
+	username = strtok (id, "@");
+	if (!username) {
+		DBG_ERR("Error parsing the identifier");
+		return -1;
+	}
+	DBG_DEBUG("Username in identifier: %s\n", username);
+	errno = 0;
+
+	/* Convert local user name to uid/gid */
+	password = getpwnam(username);
+	if (password) {
+		DBG_DEBUG("getpwnam returned [%d]\n", password->pw_uid);
+		*puid = password->pw_uid;
+		return 0;
+	} else {
+		DBG_ERR("getpwnam returned error [%d]\n", errno);
+		return -1;
+	}
+	return -1;
+}
+
+/* Use getgrnam to convert the string group identifier to numeric */
+static int get_numeric_gid(char *id, uint32_t len, uint32_t *pgid)
+{
+	char *groupname = NULL;
+	struct group *group = NULL;
+
+	/* Check if the id is in form of groupname@domainname */
+	if (NULL == strchr (id, '@')) {
+		DBG_DEBUG("ace.who is numeric identifier\n");
+		char *endptr = NULL;
+		uint32_t gid;
+		gid = strtoul(id, &endptr, 10);
+		if (endptr >= id && endptr < id + len) {
+			DBG_ERR("Error converting id [%s] to numeric id\n", id);
+			return -1;
+		} else {
+			*pgid = gid;
+			return 0;
+		}
+	}
+	DBG_DEBUG("ace.who is string identifier\n");
+
+	/* Parse the identifier to get only groupname. Strip off the @localdomain */
+	groupname = strtok (id, "@");
+	if (!groupname) {
+		DBG_ERR("Error parsing the identifier");
+		return -1;
+	}
+	DBG_DEBUG("Group name in identifier: %s\n", groupname);
+	errno = 0;
+
+	/* Convert local user name to uid/gid */
+	group = getgrnam(groupname);
+	if (group) {
+		DBG_DEBUG("getgrnam returned [%d]\n", group->gr_gid);
+		*pgid = group->gr_gid;
+		return 0;
+	} else {
+		DBG_ERR("getgrnam returned error [%d]\n", errno);
+		return -1;
+	}
+	return -1;
+}
+static NTSTATUS nfs40acl_to_smb4acl(struct vfs_handle_struct *handle,
+				   TALLOC_CTX *mem_ctx,
+				   nfsacl40 *nacl40,
+				   struct SMB4ACL_T **_smb4acl)
+{
+	struct nfs4acl_config *config = NULL;
+	struct SMB4ACL_T *smb4acl = NULL;
+	unsigned nfsacl41_flag = 0;
+	uint16_t smb4acl_flags = 0;
+	unsigned naces = nfs40acl_get_naces(nacl40);
+	unsigned int i;
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config,
+				struct nfs4acl_config,
+				return NT_STATUS_INTERNAL_ERROR);
+
+	smb4acl = smb_create_smb4acl(mem_ctx);
+	if (smb4acl == NULL) {
+		return NT_STATUS_INTERNAL_ERROR;
+	}
+
+	DBG_DEBUG("flags [%x] nace [%u]\n", smb4acl_flags, naces);
+
+	for (i = 0; i < naces; i++) {
+		nfsace40 *nace40 = nfs40acl_get_ace(nacl40, i);
+		SMB_ACE4PROP_T smbace = { 0 };
+
+		DBG_DEBUG("type [%d] flag [%x] mask [%x] who [%s]\n",
+			  nace40->type, nace40->flag,
+			  nace40->access_mask, nace40->who.utf8string_val);
+
+		smbace.aceType = nace40->type;
+		smbace.aceFlags = nace40->flag;
+		smbace.aceMask = nace40->access_mask;
+
+		if (0 == strncmp(nace40->who.utf8string_val, "OWNER@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("OWNER@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_OWNER;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "GROUP@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("GROUP@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_GROUP;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "EVERYONE@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("EVERYONE@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_EVERYONE;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "INTERACTIVE@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("INTERACTIVE@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_INTERACTIVE;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "NETWORK@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("NETWORK@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_NETWORK;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "DIALUP@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("DIALUP@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_DIALUP;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "BATCH@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("BATCH@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_BATCH;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "ANONYMOUS@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("ANONYMOUS@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_ANONYMOUS;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "AUTHENTICATED@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("AUTHENTICATED@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_AUTHENTICATED;
+		} else if (0 == strncmp(nace40->who.utf8string_val, "SERVICE@", nace40->who.utf8string_len)) {
+			DBG_DEBUG("SERVICE@\n");
+			smbace.flags |= SMB_ACE4_ID_SPECIAL;
+			smbace.who.special_id = SMB_ACE4_WHO_SERVICE;
+
+		} else {
+			uint32_t numeric_id;
+			char *id = NULL;
+			int err;
+
+			if (nace40->who.utf8string_len + 1 < nace40->who.utf8string_len) {
+				DBG_ERR("Integer overflow error while converting NFS4 ACE\n");
+				continue;
+			}
+			id = talloc_zero_size(mem_ctx, nace40->who.utf8string_len + 1);
+			if (NULL == id) {
+				DBG_ERR("talloc_zero_size failed for allocating %d bytes id\n",
+					nace40->who.utf8string_len + 1);
+				continue;
+			}
+
+			memcpy(id, nace40->who.utf8string_val, nace40->who.utf8string_len);
+
+			DBG_DEBUG("converting id [%s] to numeric id \n", id);
+			if (nace40->flag & ACE4_IDENTIFIER_GROUP) {
+				err = get_numeric_gid(id, nace40->who.utf8string_len, &numeric_id);
+				DBG_DEBUG("ACE gid [%d]\n", numeric_id);
+			} else {
+				err = get_numeric_uid(id, nace40->who.utf8string_len, &numeric_id);
+			}
+
+			if (err) {
+				DBG_ERR("Error converting string id [%s] to numeric id\n", id);
+				TALLOC_FREE(id);
+				continue;
+			}
+			TALLOC_FREE(id);
+
+			if (nace40->flag & ACE4_IDENTIFIER_GROUP) {
+				smbace.who.gid = numeric_id;
+			} else {
+				smbace.who.uid = numeric_id;
+			}
+		}
+		smb_add_ace4(smb4acl, &smbace);
+	}
+
+	*_smb4acl = smb4acl;
+	return NT_STATUS_OK;
+}
+
 static NTSTATUS nfs4acl_to_smb4acl(struct vfs_handle_struct *handle,
 				   TALLOC_CTX *mem_ctx,
 				   nfsacl41 *nacl,
@@ -379,6 +952,37 @@
 	}
 
 	*_smb4acl = smb4acl;
+	return NT_STATUS_OK;
+}
+
+NTSTATUS nfs40acl_xdr_blob_to_smb4(struct vfs_handle_struct *handle,
+				  TALLOC_CTX *mem_ctx,
+				  DATA_BLOB *blob,
+				  struct SMB4ACL_T **_smb4acl)
+{
+	struct nfs4acl_config *config = NULL;
+	nfsacl40 *nacl40 = NULL;
+	struct SMB4ACL_T *smb4acl = NULL;
+	NTSTATUS status;
+
+	DBG_DEBUG("entered\n");
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config,
+				struct nfs4acl_config,
+				return NT_STATUS_INTERNAL_ERROR);
+
+	status = nfs40acl_xdr_blob_to_nfs40acl(handle, talloc_tos(), blob, &nacl40);
+	if (!NT_STATUS_IS_OK(status)) {
+		return status;
+	}
+
+	status = nfs40acl_to_smb4acl(handle, mem_ctx, nacl40, &smb4acl);
+	TALLOC_FREE(nacl40);
+	if (!NT_STATUS_IS_OK(status)) {
+		return status;
+	}
+
+	*_smb4acl = smb4acl;
 	return NT_STATUS_OK;
 }
 
diff -ur samba-4.9.1/source3/modules/nfs4acl_xattr_xdr.h samba-4.9.1-patched/source3/modules/nfs4acl_xattr_xdr.h
--- samba-4.9.1/source3/modules/nfs4acl_xattr_xdr.h	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/nfs4acl_xattr_xdr.h	2019-12-17 20:26:48.363683691 +0530
@@ -19,7 +19,7 @@
 #ifndef __NFS4ACL_XATTR_XDR_H__
 #define __NFS4ACL_XATTR_XDR_H__
 
-#define NFS4ACL_XDR_XATTR_NAME "security.nfs4acl_xdr"
+#define NFS4ACL_XDR_XATTR_NAME "system.nfs4_acl"
 #define NFS4ACL_XDR_MAX_ACES 8192
 
 NTSTATUS nfs4acl_xdr_blob_to_smb4(struct vfs_handle_struct *handle,
@@ -31,5 +31,15 @@
 				     TALLOC_CTX *mem_ctx,
 				     struct SMB4ACL_T *smbacl,
 				     DATA_BLOB *blob);
+
+NTSTATUS nfs40acl_xdr_blob_to_smb4(struct vfs_handle_struct *handle,
+				  TALLOC_CTX *mem_ctx,
+				  DATA_BLOB *blob,
+				  struct SMB4ACL_T **_smb4acl);
+
+NTSTATUS nfs40acl_smb4acl_to_xdr_blob(vfs_handle_struct *handle,
+				     TALLOC_CTX *mem_ctx,
+				     struct SMB4ACL_T *smbacl,
+				     DATA_BLOB *blob);
 
 #endif /* __NFS4ACL_XATTR_XDR_H__ */
diff -ur samba-4.9.1/source3/modules/vfs_nfs4acl_xattr.c samba-4.9.1-patched/source3/modules/vfs_nfs4acl_xattr.c
--- samba-4.9.1/source3/modules/vfs_nfs4acl_xattr.c	2018-07-12 13:53:36.000000000 +0530
+++ samba-4.9.1-patched/source3/modules/vfs_nfs4acl_xattr.c	2019-12-17 20:26:53.483715959 +0530
@@ -42,6 +42,7 @@
 static const struct enum_list nfs4acl_encoding[] = {
 	{NFS4ACL_ENCODING_NDR, "ndr"},
 	{NFS4ACL_ENCODING_XDR, "xdr"},
+	{NFS40ACL_ENCODING_XDR, "xdr40"},
 };
 
 /*
@@ -60,6 +61,10 @@
 				struct nfs4acl_config,
 				return false);
 
+	if (!config->validate_mode) {
+		return true;
+	}
+
 	if (!VALID_STAT(smb_fname->st)) {
 		/* might be a create */
 		return true;
@@ -228,6 +233,9 @@
 	case NFS4ACL_ENCODING_XDR:
 		status = nfs4acl_xdr_blob_to_smb4(handle, mem_ctx, blob, smb4acl);
 		break;
+	case NFS40ACL_ENCODING_XDR:
+		status = nfs40acl_xdr_blob_to_smb4(handle, mem_ctx, blob, smb4acl);
+		break;
 	default:
 		status = NT_STATUS_INTERNAL_ERROR;
 		break;
@@ -328,6 +336,10 @@
 		status = nfs4acl_smb4acl_to_xdr_blob(handle, talloc_tos(),
 						     smb4acl, &blob);
 		break;
+	case NFS40ACL_ENCODING_XDR:
+		status = nfs40acl_smb4acl_to_xdr_blob(handle, talloc_tos(),
+						     smb4acl, &blob);
+		break;
 	default:
 		status = NT_STATUS_INTERNAL_ERROR;
 		break;
@@ -390,6 +402,12 @@
 	} else {
 		expected_mode = 0666;
 	}
+
+	if (!config->validate_mode) {
+		existing_mode = 0;
+		expected_mode = 0;
+	}
+
 	if ((existing_mode & expected_mode) != expected_mode) {
 		int saved_errno = 0;
 
@@ -487,6 +505,7 @@
 	struct nfs4acl_config *config = NULL;
 	const struct enum_list *default_acl_style_list = NULL;
 	const char *default_xattr_name = NULL;
+	bool default_validate_mode = true;
 	int enumval;
 	unsigned nfs_version;
 	int ret;
@@ -524,7 +543,9 @@
 
 	switch (config->encoding) {
 	case NFS4ACL_ENCODING_XDR:
+	case NFS40ACL_ENCODING_XDR:
 		default_xattr_name = NFS4ACL_XDR_XATTR_NAME;
+		default_validate_mode = false;
 		break;
 	case NFS4ACL_ENCODING_NDR:
 	default:
@@ -560,6 +581,11 @@
 						   "xattr_name",
 						   default_xattr_name);
 
+	config->validate_mode = lp_parm_bool(SNUM(handle->conn),
+					     "nfs4acl_xattr",
+					     "validate_mode",
+					     default_validate_mode);
+
 	SMB_VFS_HANDLE_SET_DATA(handle, config, NULL, struct nfs4acl_config,
 				return -1);
 
diff -ur samba-4.9.1/source3/wscript samba-4.9.1-patched/source3/wscript
--- samba-4.9.1/source3/wscript	2018-09-06 13:29:20.000000000 +0530
+++ samba-4.9.1-patched/source3/wscript	2019-12-17 20:26:29.260563277 +0530
@@ -1658,7 +1658,7 @@
                                       vfs_preopen vfs_catia
                                       vfs_media_harmony vfs_unityed_media vfs_fruit vfs_shell_snap
                                       vfs_commit vfs_worm vfs_crossrename vfs_linux_xfs_sgid
-                                      vfs_time_audit vfs_offline vfs_virusfilter
+                                      vfs_time_audit vfs_offline vfs_virusfilter vfs_nfs4acl_xattr
                                   '''))
     default_shared_modules.extend(TO_LIST('auth_script idmap_tdb2 idmap_script'))
     # these have broken dependencies
@@ -1673,7 +1673,7 @@
         default_shared_modules.extend(TO_LIST('gpext_security gpext_registry gpext_scripts'))
 
     if Options.options.enable_selftest or Options.options.developer:
-        default_shared_modules.extend(TO_LIST('vfs_fake_acls vfs_nfs4acl_xattr'))
+        default_shared_modules.extend(TO_LIST('vfs_fake_acls'))
         default_shared_modules.extend(TO_LIST('vfs_error_inject'))
         default_shared_modules.extend(TO_LIST('vfs_delay_inject'))
 
Only in samba-4.9.1-patched/source3: wscript.orig
